setwd("/media/ayf/dump/writingswork/draftthesis")
source('/dump/writingswork/draftthesis/thesis.R')
View(mycolnames)
View(mydata)
source('/dump/writingswork/draftthesis/thesis.R')
View(mycolnames)
View(mydata)
dunn.test(V5~V2, data = mydata)
install.packages("ggplot2")
install.packages("stringr")
install.packages("plyr")
install.packages("grid")
install.packages("gridExtra")
install.packages("methods")
install.packages("xtable")
install.packages("knitr")
install.packages("dunn.test")
install.packages("ggplot2")
source('/dump/writingswork/draftthesis/thesis.R')
View(mydata)
dunn.test()
dunn.test(V2 ~ V5, data = mydata)
with( mydata, dunn.test(V2 ~ V5))
dunn.test(mydata$V2 ~ mydata$V5)
dunn.test(mydata$V5 ~ mydata$V2)
kruskal.test(V2 ~ V5, data = mydata)
kruskal.test(V5 ~ V2, data = mydata)
kruskal.test(V6 ~ V2, data = mydata)
kruskal.test(V86 ~ V2, data = mydata)
kruskal.test(V66 ~ V2, data = mydata)
kruskal.test(V76 ~ V2, data = mydata)
mycolnames[76]
dunn.test(mydata$V76, mydata$V2)
View(mydata)
View(mycolnames)
mycolnames
View(mycolnames$V76)
(mycolnames$V76)
dunn.test(mydata$V125, mydata$V2)
dunn.test(mydata$V21, mydata$V2)
(mycolnames$V21)
(mycolnames$V102)
dunn.test(mydata$102, mydata$V2)
dunn.test(mydata$V102, mydata$V2)
aggregate(mydata$V102)
do.call(rbind,lapply(split(mydata,mydata$V2),function(chunk) chunk[which.max(mydata$V2),]))
do.call(rbind,lapply(split(mydata,mydata$V2),function(chunk) chunk[which.max(mydata$V102),]))
split(mydata,mydata$V2)
lapply(split(mydata,mydata$V2),function(chunk) chunk[which.max(mydata$V102),])
lapply(split(mydata,mydata$V2),function(chunk) chunk[which.mean(mydata$V102),])
aggregate(mydata$V102, list(mydata$V2), max)
mydata$V102
aggregate(mydata$V102, list(mydata$V2), max, na.action = na.omit)
aggregate(mydata$V102, list(mydata$V2), mean, na.action = na.omit)
mydata$V102
aggregate(mydata$V102, list(mydata$V2), length, na.action = na.omit)
aggregate(mydata$V102, list(mydata$V2), length)
aggregate(mydata$V102, list(mydata$V2), mean)
aggregate(mydata$V102, list(mydata$V2), mean, na.omit)
aggregate(mydata$V102, list(mydata$V2), mean, na.rm = TRUE)
dunn.test(mydata$V102, mydata$V2)
source('/dump/writingswork/draftthesis/thesis.R')
dunn.test(mydata$V102, mydata$V2)
aggregate(mydata$V102, list(mydata$V2), mean, na.rm = TRUE)
mydata$V102
mycolnames$V102
plot(cars)
for (i in 3:length(mycolnames)) { cat i }
for (i in 3:length(mycolnames)) { cat (i) }
for (i in 3:length(mycolnames)) { i }
for (i in 3:length(mycolnames)) { print(i) }
for (i in 3:length(mycolnames)) { print(colname[i]) }
for (i in 3:length(mycolnames)) { print(mycolnamess[i]) }
for (i in 3:length(mycolnames)) { print(mycolnames[i]) }
for (i in 3:length(mycolnames)) { print(mycolnames[i]) ; aggregate(mydata[,i], list(mydata$V2), max) }
for (i in 4:length(mycolnames)) { print(mycolnames[i]) ; aggregate(mydata[,i], list(mydata$V2), mean) }
for (i in 4:length(mycolnames)) { print(mycolnames[i]) ; print(mydata[,i]) ; aggregate(mydata[,i], list(mydata$V2), mean) }
for (i in 4:length(mycolnames)) { print(mycolnames[i]) ; print(mydata[,i]) ; print(aggregate(mydata[,i], list(mydata$V2), mean)) }
for (i in 4:length(mycolnames)) { print(mycolnames[i]) ; print(mydata[,i]) ; print(aggregate(mydata[,i], list(mydata$V2), mean, na.rm = TRUE)) ; print(dunn.test(mydata[,i], mydata$V2)) }
for (i in 4:length(mycolnames)) { print(mycolnames[i]) ; print(aggregate(mydata[,i], list(mydata$V2), mean, na.rm = TRUE)) ; print(dunn.test(mydata[,i], mydata$V2)) }
for (i in 4:length(mycolnames)) { print(mycolnames[i]) ; print(aggregate(mydata[,i], list(mydata$V2), mean, na.rm = TRUE)) ; dunn.test(mydata[,i], mydata$V2) }
for (i in 4:length(mycolnames)) { print(mycolnames[i]) ; print(aggregate(mydata[,i], list(mydata$V2), mean, na.rm = TRUE)) ; dunn.test(mydata[,i], mydata$V2, method = "bonferroni") }
source('/dump/writingswork/draftthesis/thesis.R')
for (i in 4:length(mycolnames)) {
pandoc.table(mycolnames[i])
print(aggregate(mydata[,i], list(mydata$V2), mean, na.rm = TRUE))
dunn.test(mydata[,i], mydata$V2, method = "bonferroni")
}
source('/dump/writingswork/draftthesis/thesis.R')
source('~/.active-rstudio-document')
source('/dump/writingswork/draftthesis/thesis.R')
pandoc.table
pandoc.table()
print(aggregate(mydata[,i], list(mydata$V2), mean, na.rm = TRUE))
pandoc(aggregate(mydata[,i], list(mydata$V2), mean, na.rm = TRUE))
source('/dump/writingswork/draftthesis/thesis.R')
pandoc(aggregate(mydata[,i], list(mydata$V2), mean, na.rm = TRUE))
source('/dump/writingswork/draftthesis/thesis.R')
aggregate(mydata[,i], list(mydata$V2), mean, na.rm = TRUE)
dunn.test(mydata[,i], mydata$V2, method = "bonferroni")
dunn.test(mydata[,i], mydata$V2, method = "bonferroni")$P
dunn.test(mydata[,i], mydata$V2, method = "bonferroni")x<-
x<-dunn.test(mydata[,i], mydata$V2, method = "bonferroni")
x$Z
x$chi2
x$P
lol <- c("D vs DT", "")
x$P.adjusted
x$P
x
dunn.test(mydata[,i], mydata$V2, method = "bonferroni")x
dunn.test(mydata[,i], mydata$V2, method = "bonferroni")
lol <- c("D vs DT", "T vs DT", "D vs T", "V vs DT", "V vs D", "V vs T")
lol2<-lol
lol2[2,] <- x$P
x$P
lol2[1,]
lol2<-df(lol)
lol2<-data.frame(lol, x$P)
lol2
source('/dump/writingswork/draftthesis/thesis.R')
kruskal.test(V154 ~ V2, data = mydata)
y <- kruskal.test(V154 ~ V2, data = mydata)
y$p.value
myFormula <- as.formula(paste(mytarget,"~ V2"))
colnames(mycolnames)[i]
typeof(colnames(mycolnames)[i])
mytarget <- colnames(mycolnames)[i]
myFormula <- as.formula(paste(mytarget,"~ V2"))
kruskal.test(V154 ~ V2, data = mydata)
kruskal.test(myFormula, data = mydata)
source('~/.active-rstudio-document')
source('/dump/writingswork/draftthesis/thesis.R')
kw$statistic
kw$p.value
source('/dump/writingswork/draftthesis/thesis.R')
suppressMessages()
source('~/.active-rstudio-document')
source('/dump/writingswork/draftthesis/thesis.R')
dunn.test
source('/dump/writingswork/draftthesis/thesis.R')
kruskal.test(as.formula(paste(colnames(mycolnamessevendays)[i], "~V2"))
)
kruskal.test(as.formula(paste(colnames(mycolnamessevendays)[i], "~V2")), data = mydatasevendays)
sd <- kruskal.test(as.formula(paste(colnames(mycolnamessevendays)[i], "~V2")), data = mydatasevendays)
rm(sd)
lool <- invisible(kruskal.test(as.formula(paste(colnames(mycolnamessevendays)[i], "~V2")), data = mydatasevendays))
lool
```{r, echo=FALSE, message=FALSE, results='asis'}
pandoc.table(aggregate(mydatasevendays[,i], list(mydatasevendays$V2), mean, na.rm = TRUE), style = "rmarkdown")
source('/dump/writingswork/draftthesis/thesis.R')
pandoc.table(aggregate(mydatasevendays[,i], list(mydatasevendays$V2), mean, na.rm = TRUE), style = "rmarkdown")
typeof(pandoc.table(aggregate(mydatasevendays[,i], list(mydatasevendays$V2), mean, na.rm = TRUE), style = "rmarkdown"))
?pandoc.table
source('/dump/writingswork/draftthesis/thesis.R')
mycolnamessevendays[i]
typeof(mycolnamessevendays[i])
typeof(mycolnamessevendays)
typeof(mycolnamessevendays[[i])
typeof(mycolnamessevendays[[i]])
source('/dump/writingswork/draftthesis/thesis.R')
mydatasevendays
mydatasevendays[mydatasevendays$V2 == "D"]
length(mydatasevendays[mydatasevendays$V2 == "D"])
length(mydatasevendays
)
subset(mydatasevendays, V2 == "D")
subset(mydatasevendays, V2 == "D" || V2 == "V" || V2 == "C" )
subset(mydatasevendays, V2 == "D" || V2 == "V" || V2 == "C" )$V2
subset(mydatasevendays, ((V2 == "D") | (V2 == "V") | (V2 == "C")) )$V2
subset(mydatasevendays, ((V2 == "D") | (V2 == "V") | (V2 == "C")) )
source('/dump/writingswork/draftthesis/thesis.R')
```{r, echo=FALSE, message=FALSE, results='asis'}
source('/dump/writingswork/draftthesis/thesis.R')
invivodatasubset
invivodata
invivodata$V2
source('/dump/writingswork/draftthesis/thesis.R')
View(invivodataonedays)
levels(invivodataonedays)
levels(invivodataonedays$V2)
levels(invivodataonedays$V2)[levels(invivodataonedays$V2)=="C"] <- "A"
levels(invivodataonedays$V2)
levels(invivodataonedays$V2)[levels(invivodataonedays$V2)=="A"] <- "C"
levels(invivodataonedays$V2)
invivodataonedays$V2
source('/dump/writingswork/draftthesis/thesis.R')
reportstats(invivodatathreedays, invivocolnamethreedays)
i
source('/dump/writingswork/draftthesis/thesis.R')
i
reportstats(invivodatathreedays, invivocolnamethreedays)
invivocolnamethreedays
reportstats(invivodatasevendays, invivocolnamesevendays)
source('/dump/writingswork/draftthesis/thesis.R')
reportstats(invivodatathreedays, invivocolnamethreedays)
View(invivocolnamethreedays)
View(invivodatathreedays)
typeof(invivodataonedays$V1)
typeof(invivodataonedays$V2)
typeof(invivodataonedays$V3)
typeof(invivodataonedays$V5)
typeof(invivodataonedays$V6)
invivodataonedays$V1
typeof(invivodataonedays$V60)
i
i <-4
i
invivocolnames[[i]] == "Animal"
invivodataonedays[[i]] == "Animal"
invivodataonedays[[i]] == "V1"
invivocolnameonedays[[i]]
invivocolnameonedays[[1]]
invivocolnameonedays[[1]] =="animal"
invivocolnameonedays[[1]] == "Animal"
source('/dump/writingswork/draftthesis/thesis.R')
View(invivodatasevendays)
plot(cars)
plotColumnTwoGroups(invivocolnameonedays,
analyzedColName = "day.1.body.weight..g.",
groupedConditionColumnName = "treatment",
otherConditionColumnName = "treatment",
otherConditionSet = c("V", "D", "T"),
xtitle = "day.1.body.weight..g."")
)
""
plotColumnTwoGroups(invivocolnameonedays,
analyzedColName = "day.1.body.weight..g.",
groupedConditionColumnName = "treatment",
otherConditionColumnName = "treatment",
otherConditionSet = c("V", "D", "T"),
xtitle = "day.1.body.weight..g."
)
plotColumnTwoGroups(invivodataonedays,
analyzedColName = "day.1.body.weight..g.",
groupedConditionColumnName = "treatment",
otherConditionColumnName = "treatment",
otherConditionSet = c("V", "D", "T"),
xtitle = "day.1.body.weight..g."
)
warnings()
View(invivodataonedays)
invivodataonedays$day.1.body.weight..g.
invivodataonedays$treatment
plotTimeline(shortdf,
analyzedColName = ytitle,
timeConditionColumnName = variableColname,
otherConditionColumnName = "treatment",
otherConditionSet = conds,
xtitle = variableColname)
plotTimeline(invivodataonedays,
analyzedColName = "day.1.body.weight..g.",
timeConditionColumnName = variableColname,
otherConditionColumnName = "treatment",
otherConditionSet = c("V", "D", "T"),
xtitle = "day")
plotTimeline(invivodataonedays,
analyzedColName = "day.1.body.weight..g.",
timeConditionColumnName = c("day.1.body.weight..g.", "day.1.body.weight..g."),
otherConditionColumnName = "treatment",
otherConditionSet = c("V", "D", "T"),
xtitle = "day")
plotTimeline(invivodataonedays,
analyzedColName = "day.1.body.weight..g.",
timeConditionColumnName = "day.1.body.weight..g.",
otherConditionColumnName = "treatment",
otherConditionSet = c("V", "D", "T"),
xtitle = "day")
source('/dump/writingswork/draftthesis/thesis.R')
reportstats(invivodataonedays, invivocolnameonedays)
source('/dump/writingswork/draftthesis/thesis.R')
reportstats(invivodataonedays, invivocolnameonedays)
source('/dump/writingswork/draftthesis/thesis.R')
data.frame(c(1, 2, 3), c("a", "b", "c"))
setNames(data.frame(c(1, 2, 3), c("a", "b", "c")), c("x", "y"))
lol <- setNames(data.frame(c(1, 2, 3), c("a", "b", "c")), c("x", "y"))
lol$x
lol$[c(1,2)]
lol[, c(1,2)]
lol[, c(1)]
source('/dump/writingswork/draftthesis/thesis.R')
reportstats(invivodatasevendays, invivocolnamesevendays)
i<-3
kw <- kruskal.test(as.formula(paste(colnames(invivodata)[i], "~treatment")), data = invivodata)
kw <- kruskal.test(as.formula(paste(colnames(invivodatasevendays)[i], "~treatment")), data = invivodata)
kw <- kruskal.test(as.formula(paste(colnames(invivodatasevendays)[i], "~treatment")), data = invivodatasevendays)
dunns <- dunn.test(invivodatasevendays[,i], invivodatasevendays$treatment, method = "bonferroni")
data.frame(contrastsfour, dunns$P)
data.frame(contrastsfour, dunns$P)[, c(5,1)]
data.frame(contrastsfour, dunns$P)[, c(2,1)]
data.frame(contrastsfour, dunns$P)[c(5,1), ]
str(data.frame(contrastsfour, dunns$P)[c(5,1), ])
pandoc.table.return(dunnsreport, style = "rmarkdown")
pandoc.table.return(data.frame(contrastsfour, dunns$P)[c(5,1), ], style = "rmarkdown")
pandoc.table.return(data.frame(contrastsfour, dunns$P)[c(5,1), ], style = "rmarkdown", )
sizeof(data.frame(contrastsfour, dunns$P)[c(5,1), ])
size(data.frame(contrastsfour, dunns$P)[c(5,1), ])
length(data.frame(contrastsfour, dunns$P)[c(5,1), ])
din(data.frame(contrastsfour, dunns$P)[c(5,1), ])
dim(data.frame(contrastsfour, dunns$P)[c(5,1), ])
rownames(data.frame(contrastsfour, dunns$P)[c(5,1), ])
aggregate
?aggregate
aggregate(invivodata[,i], list(invivodata$treatment), longdescription)
aggregate(invivodatasevendays[,i], list(invivodatasevendays$treatment), longdescription)
aggregate(invivodatasevendays[,4], list(invivodatasevendays$treatment), longdescription)
mean(invivodatasevendays[,4])
mean(subset(invivodatasevendays[,4], treatment == "D"))
mean(subset(invivodatasevendays, treatment == "D")[,4])
mean(subset(invivodatasevendays, treatment == "V")[,4])
dunns
dunns$P
dunns$P[c(1,5)]
meanV <- mean(subset(invivodatasevendays, treatment == "V")[,4])
meanD <- mean(subset(invivodatasevendays, treatment == "D")[,4])
meanV > meanD
(meanV > meanD) ? "V > D" : "V < D"
(meanV > meanD) ? 'V > D' : 'V < D'
(meanV > meanD) ? 1:2
(meanV > meanD)?1:2
meanV
meanD
ifelse(meanV > meanD, 'V > D' , 'V < D')
plotTimeline(invivodatasevendays, analyzedColName = c("day.1.body.weight..g.", "day.2.body.weight..g.", "day.3.body.weight..g.", "day.4.body.weight..g.", "day.5.body.weight..g."), timeConditionSet = c(1, 2, 3, 4, 5))
plotTimeline(invivodatasevendays, analyzedColName = "day.1.body.weight..g.", timeConditionColumnName = "day",
otherConditionColumnName = "treatment",
otherConditionSet = c("V", "D"),
xtitle = "day.1.body.weight..g.")
plotTimeline(invivodatasevendays, analyzedColName = "day.1.body.weight..g.", timeConditionColumnName = "day",
otherConditionColumnName = "treatment",
xtitle = "day.1.body.weight..g.")
colnames(invivocolnamesevendays)
colnames(invivodatasevendays)
myseries <- c(
"day.1.body.weight..g.",
"day.2.body.weight..g." ,
"day.3.body.weight..g."  ,
"day.4.body.weight..g."   ,
"day.5.body.weight..g."    ,
"day.6.body.weight..g."     ,
"day.7.body.weight..g."      ,
"day.8.body.weight..g."   )
""
myseries <- c(
"day.1.body.weight..g.",
"day.2.body.weight..g." ,
"day.3.body.weight..g."  ,
"day.4.body.weight..g."   ,
"day.5.body.weight..g."    ,
"day.6.body.weight..g."     ,
"day.7.body.weight..g."      ,
"day.8.body.weight..g."   )
plotTimeline(invivodatasevendays, analyzedColName = myseries, timeConditionColumnName = "day",
otherConditionColumnName = "treatment",
otherConditionSet = c("V", "D"),
xtitle = "day.1.body.weight..g.")
source('/dump/writingswork/reports/commonfuncs.R')
extractWithTwoIndependentVars(invivodatasevendays, )
invivodatasevendays
invivodatasevendays[invivodatasevendays$treatment %in% c("V"),]
invivocolnames[[i]]
invivocolnamesevendays[[2]]
if (invivocolnamesevendays[[2]] %in% c("animal", "treatment")) cat (2); else cat (3)
if (invivocolnamesevendays[[2]] %in% c("animal", "treatment")) cat (2); else cat(3)
if (invivocolnamesevendays[[2]] %in% c("animal", "treatment")) cat (2) else cat (3)
if (invivocolnamesevendays[[3]] %in% c("animal", "treatment")) cat (2) else cat (3)
if (invivocolnamesevendays[[1]] %in% c("animal", "treatment")) cat (2) else cat (3)
if (invivocolnamesevendays[[10]] %in% c("animal", "treatment")) cat (2) else cat (3)
source('/dump/writingswork/draftthesis/thesis.R')
reportstats(invivodatasevendays, invivocolnamesevendays)
knit("2012.08.23.7daysTD.Rmd")
knit("data//2012.08.23.7daysTD.Rmd")
?knit
render("data//2012.08.23.7daysTD.Rmd", "pdf_document")
pandoc("data//2012.08.23.7daysTD.Rmd", "pdf_document")
pandoc("data//2012.08.23.7daysTD.md", "pdf_document")
knit("data//2012.08.23.7daysTD.Rmd") ; pandoc("2012.08.23.7daysTD.md", "pdf_document")
?pandoc
system("pandoc -h")
knit("data//2012.08.23.7daysTD.Rmd") ; pandoc("2012.08.23.7daysTD.md", format='latex')
conds <- c("V", "D", "C")
shortdf <- invivodatasevendays[ invivodatasevendays %in% conds, colnames %in% c("animal", myseries)]
myseries <- c(
"day.1.body.weight..g.",
"day.2.body.weight..g." ,
"day.3.body.weight..g."  ,
"day.4.body.weight..g."   ,
"day.5.body.weight..g."    ,
"day.6.body.weight..g."     ,
"day.7.body.weight..g."      ,
"day.8.body.weight..g."   )
shortdf <- invivodatasevendays[ invivodatasevendays %in% conds, colnames %in% c("animal", myseries)]
shortdf <- invivodatasevendays[ invivodatasevendays %in% conds, colnames(invivodatasevendays) %in% c("animal", myseries)]
shortdf
shortdf <- invivodatasevendays[ invivodatasevendays$treatment %in% conds, colnames(invivodatasevendays) %in% c("animal", myseries)]
shortdf
shortdf <- melt(shortdf, id = c("animal"))
library(ggplot2)
library(stringr)
library(plyr)
library(grid)
library(gridExtra)
library(methods)
library(xtable)
shortdf <- melt(shortdf, id = c("animal"))
library(reshape)
